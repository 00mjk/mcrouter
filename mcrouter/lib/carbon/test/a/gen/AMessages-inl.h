/*
 *  Copyright (c) 2016, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 */

namespace carbon {
namespace test {

inline void AnotherRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void AnotherRequest::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

template <class V>
void AnotherRequest::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
}

template <class V>
void AnotherRequest::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
}

inline void AnotherReply::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void AnotherReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

template <class V>
void AnotherReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
}

template <class V>
void AnotherReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
}

} // test
} // carbon
