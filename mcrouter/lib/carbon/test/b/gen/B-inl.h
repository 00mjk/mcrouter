/*
 *  Copyright (c) 2016, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 */

namespace carbon {
namespace test {

inline void BaseStruct::serialize(carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeInt64Field(1 /* field id */, baseInt64Member());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void BaseStruct::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        baseInt64Member() = reader.readInt64Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

template <class V>
void BaseStruct::visitFields(V&& v) {
  if (!v.visitField(1, "baseInt64Member", baseInt64Member_)) {
    return;
  }
}

template <class V>
void BaseStruct::visitFields(V&& v) const {
  if (!v.visitField(1, "baseInt64Member", baseInt64Member_)) {
    return;
  }
}

inline void SimpleStruct::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeInt32Field(1 /* field id */, int32Member());
  writer.writeBinaryField(2 /* field id */, stringMember());
  writer.writeInt64Field(3 /* field id */, static_cast<int64_t>(enumMember()));
  writer.writeVectorField<test2::util::SimpleStruct>(
      4 /* field id */, vectorMember());
  writer.writeFieldHeader(carbon::FieldType::Struct, -1);
  _carbon_basestruct_.serialize(writer);
  writer.writeStructEnd();
  writer.writeStop();
}

inline void SimpleStruct::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case -1: {
        _carbon_basestruct_.deserialize(reader);
        break;
      }
      case 1: {
        int32Member() = reader.readInt32Field();
        break;
      }
      case 2: {
        stringMember() = reader.readBinaryField<std::string>();
        break;
      }
      case 3: {
        enumMember() =
            static_cast<test2::util::SimpleEnum>(reader.readInt64Field());
        break;
      }
      case 4: {
        vectorMember() = reader.readVectorField<test2::util::SimpleStruct>();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

template <class V>
void SimpleStruct::visitFields(V&& v) {
  if (v.enterMixin(1, "BaseStruct", _carbon_basestruct_)) {
    _carbon_basestruct_.visitFields(std::forward<V>(v));
  }
  if (!v.leaveMixin()) {
    return;
  }
  if (!v.visitField(1, "int32Member", int32Member_)) {
    return;
  }
  if (!v.visitField(2, "stringMember", stringMember_)) {
    return;
  }
  if (!v.visitField(3, "enumMember", enumMember_)) {
    return;
  }
  if (!v.visitField(4, "vectorMember", vectorMember_)) {
    return;
  }
}

template <class V>
void SimpleStruct::visitFields(V&& v) const {
  if (v.enterMixin(1, "BaseStruct", _carbon_basestruct_)) {
    _carbon_basestruct_.visitFields(std::forward<V>(v));
  }
  if (!v.leaveMixin()) {
    return;
  }
  if (!v.visitField(1, "int32Member", int32Member_)) {
    return;
  }
  if (!v.visitField(2, "stringMember", stringMember_)) {
    return;
  }
  if (!v.visitField(3, "enumMember", enumMember_)) {
    return;
  }
  if (!v.visitField(4, "vectorMember", vectorMember_)) {
    return;
  }
}

} // test
} // carbon
