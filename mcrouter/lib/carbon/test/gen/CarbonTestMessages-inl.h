/*
 *  Copyright (c) 2017-present, Facebook, Inc.
 *
 *  This source code is licensed under the MIT license found in the LICENSE
 *  file in the root directory of this source tree.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 *  @generated
 */

namespace carbon {
namespace test {

template <class Writer>
void TestRequest::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(-1 /* field id */, asBase());
  writer.writeField(1 /* field id */, key());
  writer.writeField(2 /* field id */, testEnum());
  writer.writeField(3 /* field id */, testBool());
  writer.writeField(4 /* field id */, testChar());
  writer.writeField(5 /* field id */, testInt8());
  writer.writeField(6 /* field id */, testInt16());
  writer.writeField(7 /* field id */, testInt32());
  writer.writeField(8 /* field id */, testInt64());
  writer.writeField(9 /* field id */, testUInt8());
  writer.writeField(10 /* field id */, testUInt16());
  writer.writeField(11 /* field id */, testUInt32());
  writer.writeField(12 /* field id */, testUInt64());
  writer.writeField(13 /* field id */, testFloat());
  writer.writeField(14 /* field id */, testDouble());
  writer.writeField(15 /* field id */, testShortString());
  writer.writeField(16 /* field id */, testLongString());
  writer.writeField(17 /* field id */, testIobuf());
  writer.writeField(18 /* field id */, testStruct());
  writer.writeField(19 /* field id */, testList());
  writer.writeField(20 /* field id */, testOptionalString());
  writer.writeField(21 /* field id */, testOptionalIobuf());
  writer.writeField(22 /* field id */, testEnumVec());
  writer.writeField(23 /* field id */, testUnion());
  writer.writeField(24 /* field id */, testNestedVec());
  writer.writeField(25 /* field id */, testUMap());
  writer.writeField(26 /* field id */, testMap());
  writer.writeField(27 /* field id */, testComplexMap());
  writer.writeField(28 /* field id */, testUSet());
  writer.writeField(29 /* field id */, testSet());
  writer.writeField(30 /* field id */, testOptionalBool());
  writer.writeField(31 /* field id */, testOptionalVec());
  writer.writeField(32 /* field id */, testIOBufList());
  writer.writeField(33 /* field id */, testF14FastMap());
  writer.writeField(34 /* field id */, testF14NodeMap());
  writer.writeField(35 /* field id */, testF14ValueMap());
  writer.writeField(36 /* field id */, testF14VectorMap());
  writer.writeField(37 /* field id */, testF14FastSet());
  writer.writeField(38 /* field id */, testF14NodeSet());
  writer.writeField(39 /* field id */, testF14ValueSet());
  writer.writeField(40 /* field id */, testF14VectorSet());
  writer.writeField(100 /* field id */, testType());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void TestRequest::visitFields(V&& v) {
  if (v.enterMixin(1, "Base", _carbon_simplestruct_)) {
    _carbon_simplestruct_.visitFields(std::forward<V>(v));
  }
  if (!v.leaveMixin()) {
    return;
  }
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "testEnum", testEnum_)) {
    return;
  }
  if (!v.visitField(3, "testBool", testBool_)) {
    return;
  }
  if (!v.visitField(4, "testChar", testChar_)) {
    return;
  }
  if (!v.visitField(5, "testInt8", testInt8_)) {
    return;
  }
  if (!v.visitField(6, "testInt16", testInt16_)) {
    return;
  }
  if (!v.visitField(7, "testInt32", testInt32_)) {
    return;
  }
  if (!v.visitField(8, "testInt64", testInt64_)) {
    return;
  }
  if (!v.visitField(9, "testUInt8", testUInt8_)) {
    return;
  }
  if (!v.visitField(10, "testUInt16", testUInt16_)) {
    return;
  }
  if (!v.visitField(11, "testUInt32", testUInt32_)) {
    return;
  }
  if (!v.visitField(12, "testUInt64", testUInt64_)) {
    return;
  }
  if (!v.visitField(13, "testFloat", testFloat_)) {
    return;
  }
  if (!v.visitField(14, "testDouble", testDouble_)) {
    return;
  }
  if (!v.visitField(15, "testShortString", testShortString_)) {
    return;
  }
  if (!v.visitField(16, "testLongString", testLongString_)) {
    return;
  }
  if (!v.visitField(17, "testIobuf", testIobuf_)) {
    return;
  }
  if (!v.visitField(18, "testStruct", testStruct_)) {
    return;
  }
  if (!v.visitField(19, "testList", testList_)) {
    return;
  }
  if (!v.visitField(20, "testOptionalString", testOptionalString_)) {
    return;
  }
  if (!v.visitField(21, "testOptionalIobuf", testOptionalIobuf_)) {
    return;
  }
  if (!v.visitField(22, "testEnumVec", testEnumVec_)) {
    return;
  }
  if (!v.visitField(23, "testUnion", testUnion_)) {
    return;
  }
  if (!v.visitField(24, "testNestedVec", testNestedVec_)) {
    return;
  }
  if (!v.visitField(25, "testUMap", testUMap_)) {
    return;
  }
  if (!v.visitField(26, "testMap", testMap_)) {
    return;
  }
  if (!v.visitField(27, "testComplexMap", testComplexMap_)) {
    return;
  }
  if (!v.visitField(28, "testUSet", testUSet_)) {
    return;
  }
  if (!v.visitField(29, "testSet", testSet_)) {
    return;
  }
  if (!v.visitField(30, "testOptionalBool", testOptionalBool_)) {
    return;
  }
  if (!v.visitField(31, "testOptionalVec", testOptionalVec_)) {
    return;
  }
  if (!v.visitField(32, "testIOBufList", testIOBufList_)) {
    return;
  }
  if (!v.visitField(33, "testF14FastMap", testF14FastMap_)) {
    return;
  }
  if (!v.visitField(34, "testF14NodeMap", testF14NodeMap_)) {
    return;
  }
  if (!v.visitField(35, "testF14ValueMap", testF14ValueMap_)) {
    return;
  }
  if (!v.visitField(36, "testF14VectorMap", testF14VectorMap_)) {
    return;
  }
  if (!v.visitField(37, "testF14FastSet", testF14FastSet_)) {
    return;
  }
  if (!v.visitField(38, "testF14NodeSet", testF14NodeSet_)) {
    return;
  }
  if (!v.visitField(39, "testF14ValueSet", testF14ValueSet_)) {
    return;
  }
  if (!v.visitField(40, "testF14VectorSet", testF14VectorSet_)) {
    return;
  }
  if (!v.visitField(100, "testType", testType_)) {
    return;
  }
}

template <class V>
void TestRequest::visitFields(V&& v) const {
  if (v.enterMixin(1, "Base", _carbon_simplestruct_)) {
    _carbon_simplestruct_.visitFields(std::forward<V>(v));
  }
  if (!v.leaveMixin()) {
    return;
  }
  if (!v.visitField(1, "key", key_)) {
    return;
  }
  if (!v.visitField(2, "testEnum", testEnum_)) {
    return;
  }
  if (!v.visitField(3, "testBool", testBool_)) {
    return;
  }
  if (!v.visitField(4, "testChar", testChar_)) {
    return;
  }
  if (!v.visitField(5, "testInt8", testInt8_)) {
    return;
  }
  if (!v.visitField(6, "testInt16", testInt16_)) {
    return;
  }
  if (!v.visitField(7, "testInt32", testInt32_)) {
    return;
  }
  if (!v.visitField(8, "testInt64", testInt64_)) {
    return;
  }
  if (!v.visitField(9, "testUInt8", testUInt8_)) {
    return;
  }
  if (!v.visitField(10, "testUInt16", testUInt16_)) {
    return;
  }
  if (!v.visitField(11, "testUInt32", testUInt32_)) {
    return;
  }
  if (!v.visitField(12, "testUInt64", testUInt64_)) {
    return;
  }
  if (!v.visitField(13, "testFloat", testFloat_)) {
    return;
  }
  if (!v.visitField(14, "testDouble", testDouble_)) {
    return;
  }
  if (!v.visitField(15, "testShortString", testShortString_)) {
    return;
  }
  if (!v.visitField(16, "testLongString", testLongString_)) {
    return;
  }
  if (!v.visitField(17, "testIobuf", testIobuf_)) {
    return;
  }
  if (!v.visitField(18, "testStruct", testStruct_)) {
    return;
  }
  if (!v.visitField(19, "testList", testList_)) {
    return;
  }
  if (!v.visitField(20, "testOptionalString", testOptionalString_)) {
    return;
  }
  if (!v.visitField(21, "testOptionalIobuf", testOptionalIobuf_)) {
    return;
  }
  if (!v.visitField(22, "testEnumVec", testEnumVec_)) {
    return;
  }
  if (!v.visitField(23, "testUnion", testUnion_)) {
    return;
  }
  if (!v.visitField(24, "testNestedVec", testNestedVec_)) {
    return;
  }
  if (!v.visitField(25, "testUMap", testUMap_)) {
    return;
  }
  if (!v.visitField(26, "testMap", testMap_)) {
    return;
  }
  if (!v.visitField(27, "testComplexMap", testComplexMap_)) {
    return;
  }
  if (!v.visitField(28, "testUSet", testUSet_)) {
    return;
  }
  if (!v.visitField(29, "testSet", testSet_)) {
    return;
  }
  if (!v.visitField(30, "testOptionalBool", testOptionalBool_)) {
    return;
  }
  if (!v.visitField(31, "testOptionalVec", testOptionalVec_)) {
    return;
  }
  if (!v.visitField(32, "testIOBufList", testIOBufList_)) {
    return;
  }
  if (!v.visitField(33, "testF14FastMap", testF14FastMap_)) {
    return;
  }
  if (!v.visitField(34, "testF14NodeMap", testF14NodeMap_)) {
    return;
  }
  if (!v.visitField(35, "testF14ValueMap", testF14ValueMap_)) {
    return;
  }
  if (!v.visitField(36, "testF14VectorMap", testF14VectorMap_)) {
    return;
  }
  if (!v.visitField(37, "testF14FastSet", testF14FastSet_)) {
    return;
  }
  if (!v.visitField(38, "testF14NodeSet", testF14NodeSet_)) {
    return;
  }
  if (!v.visitField(39, "testF14ValueSet", testF14ValueSet_)) {
    return;
  }
  if (!v.visitField(40, "testF14VectorSet", testF14VectorSet_)) {
    return;
  }
  if (!v.visitField(100, "testType", testType_)) {
    return;
  }
}

template <class Writer>
void TestReply::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, result());
  writer.writeField(2 /* field id */, valInt32());
  writer.writeField(3 /* field id */, valInt64());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void TestReply::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "valInt32", valInt32_)) {
    return;
  }
  if (!v.visitField(3, "valInt64", valInt64_)) {
    return;
  }
}

template <class V>
void TestReply::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
  if (!v.visitField(2, "valInt32", valInt32_)) {
    return;
  }
  if (!v.visitField(3, "valInt64", valInt64_)) {
    return;
  }
}

template <class Writer>
void TestRequestStringKey::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, key());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void TestRequestStringKey::visitFields(V&& v) {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
}

template <class V>
void TestRequestStringKey::visitFields(V&& v) const {
  if (!v.visitField(1, "key", key_)) {
    return;
  }
}

template <class Writer>
void TestReplyStringKey::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, result());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void TestReplyStringKey::visitFields(V&& v) {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
}

template <class V>
void TestReplyStringKey::visitFields(V&& v) const {
  if (!v.visitField(1, "result", result_)) {
    return;
  }
}

template <class Writer>
void TestOptionalBool::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, optionalBool());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void TestOptionalBool::visitFields(V&& v) {
  if (!v.visitField(1, "optionalBool", optionalBool_)) {
    return;
  }
}

template <class V>
void TestOptionalBool::visitFields(V&& v) const {
  if (!v.visitField(1, "optionalBool", optionalBool_)) {
    return;
  }
}

template <class Writer>
void TestOptionalUnion::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  switch (_which_) {
    case 1: {
      writer.writeFieldAlways(1 /* field id */, umember1());
      break;
    }
    case 2: {
      writer.writeFieldAlways(2 /* field id */, umember2());
      break;
    }
    case 3: {
      writer.writeFieldAlways(3 /* field id */, umember3());
      break;
    }
    default:
      break;
  }
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void TestOptionalUnion::visitFields(V&& v) {
  switch (_which_) {
    case 1:
      v.visitField(1, "umember1", umember1());
      break;

    case 2:
      v.visitField(2, "umember2", umember2());
      break;

    case 3:
      v.visitField(3, "umember3", umember3());
      break;

    default:
      break;
  }
}

template <class V>
void TestOptionalUnion::visitFields(V&& v) const {
  switch (_which_) {
    case 1:
      v.visitField(1, "umember1", umember1());
      break;

    case 2:
      v.visitField(2, "umember2", umember2());
      break;

    case 3:
      v.visitField(3, "umember3", umember3());
      break;

    default:
      break;
  }
}

template <class V>
void TestOptionalUnion::foreachMember(V&& v) {
  if (!v.template visitUnionMember<1, folly::Optional<int64_t>>(
          "umember1", *this)) {
    return;
  }

  if (!v.template visitUnionMember<2, folly::Optional<bool>>(
          "umember2", *this)) {
    return;
  }

  if (!v.template visitUnionMember<3, folly::Optional<std::string>>(
          "umember3", *this)) {
    return;
  }
}

template <class V>
void TestOptionalUnion::foreachMember(V&& v) const {
  if (!v.template visitUnionMember<1, folly::Optional<int64_t>>(
          "umember1", *this)) {
    return;
  }

  if (!v.template visitUnionMember<2, folly::Optional<bool>>(
          "umember2", *this)) {
    return;
  }

  if (!v.template visitUnionMember<3, folly::Optional<std::string>>(
          "umember3", *this)) {
    return;
  }
}

template <class Writer>
void TestF14Containers::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, fastMap());
  writer.writeField(2 /* field id */, nodeMap());
  writer.writeField(3 /* field id */, valueMap());
  writer.writeField(4 /* field id */, vectorMap());
  writer.writeField(5 /* field id */, fastSet());
  writer.writeField(6 /* field id */, nodeSet());
  writer.writeField(7 /* field id */, valueSet());
  writer.writeField(8 /* field id */, vectorSet());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void TestF14Containers::visitFields(V&& v) {
  if (!v.visitField(1, "fastMap", fastMap_)) {
    return;
  }
  if (!v.visitField(2, "nodeMap", nodeMap_)) {
    return;
  }
  if (!v.visitField(3, "valueMap", valueMap_)) {
    return;
  }
  if (!v.visitField(4, "vectorMap", vectorMap_)) {
    return;
  }
  if (!v.visitField(5, "fastSet", fastSet_)) {
    return;
  }
  if (!v.visitField(6, "nodeSet", nodeSet_)) {
    return;
  }
  if (!v.visitField(7, "valueSet", valueSet_)) {
    return;
  }
  if (!v.visitField(8, "vectorSet", vectorSet_)) {
    return;
  }
}

template <class V>
void TestF14Containers::visitFields(V&& v) const {
  if (!v.visitField(1, "fastMap", fastMap_)) {
    return;
  }
  if (!v.visitField(2, "nodeMap", nodeMap_)) {
    return;
  }
  if (!v.visitField(3, "valueMap", valueMap_)) {
    return;
  }
  if (!v.visitField(4, "vectorMap", vectorMap_)) {
    return;
  }
  if (!v.visitField(5, "fastSet", fastSet_)) {
    return;
  }
  if (!v.visitField(6, "nodeSet", nodeSet_)) {
    return;
  }
  if (!v.visitField(7, "valueSet", valueSet_)) {
    return;
  }
  if (!v.visitField(8, "vectorSet", vectorSet_)) {
    return;
  }
}

template <class Writer>
void TestStdContainers::serialize(Writer&& writer) const {
  writer.writeStructBegin();
  writer.writeField(1 /* field id */, fastMap());
  writer.writeField(2 /* field id */, nodeMap());
  writer.writeField(3 /* field id */, valueMap());
  writer.writeField(4 /* field id */, vectorMap());
  writer.writeField(5 /* field id */, fastSet());
  writer.writeField(6 /* field id */, nodeSet());
  writer.writeField(7 /* field id */, valueSet());
  writer.writeField(8 /* field id */, vectorSet());
  writer.writeFieldStop();
  writer.writeStructEnd();
}

template <class V>
void TestStdContainers::visitFields(V&& v) {
  if (!v.visitField(1, "fastMap", fastMap_)) {
    return;
  }
  if (!v.visitField(2, "nodeMap", nodeMap_)) {
    return;
  }
  if (!v.visitField(3, "valueMap", valueMap_)) {
    return;
  }
  if (!v.visitField(4, "vectorMap", vectorMap_)) {
    return;
  }
  if (!v.visitField(5, "fastSet", fastSet_)) {
    return;
  }
  if (!v.visitField(6, "nodeSet", nodeSet_)) {
    return;
  }
  if (!v.visitField(7, "valueSet", valueSet_)) {
    return;
  }
  if (!v.visitField(8, "vectorSet", vectorSet_)) {
    return;
  }
}

template <class V>
void TestStdContainers::visitFields(V&& v) const {
  if (!v.visitField(1, "fastMap", fastMap_)) {
    return;
  }
  if (!v.visitField(2, "nodeMap", nodeMap_)) {
    return;
  }
  if (!v.visitField(3, "valueMap", valueMap_)) {
    return;
  }
  if (!v.visitField(4, "vectorMap", vectorMap_)) {
    return;
  }
  if (!v.visitField(5, "fastSet", fastSet_)) {
    return;
  }
  if (!v.visitField(6, "nodeSet", nodeSet_)) {
    return;
  }
  if (!v.visitField(7, "valueSet", valueSet_)) {
    return;
  }
  if (!v.visitField(8, "vectorSet", vectorSet_)) {
    return;
  }
}
} // namespace test
} // namespace carbon
