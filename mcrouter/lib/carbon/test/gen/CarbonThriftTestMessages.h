/*
 *  Copyright (c) 2017-present, Facebook, Inc.
 *
 *  This source code is licensed under the MIT license found in the LICENSE
 *  file in the root directory of this source tree.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 *  @generated
 */
#pragma once

#include <memory>
#include <string>
#include <utility>

#include <folly/Optional.h>
#include <folly/io/IOBuf.h>
#include <mcrouter/lib/carbon/CarbonProtocolReader.h>
#include <mcrouter/lib/carbon/CommonSerializationTraits.h>
#include <mcrouter/lib/carbon/Keys.h>
#include <mcrouter/lib/carbon/ReplyCommon.h>
#include <mcrouter/lib/carbon/RequestCommon.h>
#include <mcrouter/lib/carbon/RequestReplyUtil.h>
#include <mcrouter/lib/carbon/Result.h>
#include <mcrouter/lib/carbon/TypeList.h>
#include <mcrouter/lib/carbon/Variant.h>

#include "mcrouter/lib/carbon/test/gen/gen-cpp2/CarbonThriftTest_types.h"

#include "mcrouter/lib/network/gen/CommonMessages.h"

namespace carbon {
namespace test {

class DummyThriftReply;

class DummyThriftRequest : public carbon::RequestCommon {
 public:
  using reply_type = DummyThriftReply;

  static constexpr size_t typeId = 65;
  static constexpr const char* name = "thrift_test";

  DummyThriftRequest() = default;
  DummyThriftRequest(const DummyThriftRequest&) = default;
  DummyThriftRequest& operator=(const DummyThriftRequest&) = default;
  DummyThriftRequest(DummyThriftRequest&&) = default;
  DummyThriftRequest& operator=(DummyThriftRequest&&) = default;
  explicit DummyThriftRequest(folly::StringPiece sp) {
    underlyingThriftStruct_.key = sp;
  }
  explicit DummyThriftRequest(folly::IOBuf&& carbonKey) {
    underlyingThriftStruct_.key = std::move(carbonKey);
  }

  FOLLY_ERASE ::apache::thrift::field_ref<const carbon::Keys<folly::IOBuf>&>
   key_ref() const& {
    return underlyingThriftStruct_.key_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<carbon::Keys<folly::IOBuf>&>
   key_ref() & {
    return underlyingThriftStruct_.key_ref();
  }
  const carbon::Keys<folly::IOBuf>& key() const {
    return underlyingThriftStruct_.key;
  }
  carbon::Keys<folly::IOBuf>& key() {
    markBufferAsDirty();
    return underlyingThriftStruct_.key;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const bool&>
   testBool_ref() const& {
    return underlyingThriftStruct_.testBool_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<bool&>
   testBool_ref() & {
    return underlyingThriftStruct_.testBool_ref();
  }
  bool testBool() const {
    return underlyingThriftStruct_.testBool;
  }
  bool& testBool() {
    markBufferAsDirty();
    return underlyingThriftStruct_.testBool;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const int8_t&>
   testInt8_ref() const& {
    return underlyingThriftStruct_.testInt8_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<int8_t&>
   testInt8_ref() & {
    return underlyingThriftStruct_.testInt8_ref();
  }
  int8_t testInt8() const {
    return underlyingThriftStruct_.testInt8;
  }
  int8_t& testInt8() {
    markBufferAsDirty();
    return underlyingThriftStruct_.testInt8;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const int16_t&>
   testInt16_ref() const& {
    return underlyingThriftStruct_.testInt16_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<int16_t&>
   testInt16_ref() & {
    return underlyingThriftStruct_.testInt16_ref();
  }
  int16_t testInt16() const {
    return underlyingThriftStruct_.testInt16;
  }
  int16_t& testInt16() {
    markBufferAsDirty();
    return underlyingThriftStruct_.testInt16;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const int32_t&>
   testInt32_ref() const& {
    return underlyingThriftStruct_.testInt32_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<int32_t&>
   testInt32_ref() & {
    return underlyingThriftStruct_.testInt32_ref();
  }
  int32_t testInt32() const {
    return underlyingThriftStruct_.testInt32;
  }
  int32_t& testInt32() {
    markBufferAsDirty();
    return underlyingThriftStruct_.testInt32;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const int64_t&>
   testInt64_ref() const& {
    return underlyingThriftStruct_.testInt64_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<int64_t&>
   testInt64_ref() & {
    return underlyingThriftStruct_.testInt64_ref();
  }
  int64_t testInt64() const {
    return underlyingThriftStruct_.testInt64;
  }
  int64_t& testInt64() {
    markBufferAsDirty();
    return underlyingThriftStruct_.testInt64;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const uint8_t&>
   testUInt8_ref() const& {
    return underlyingThriftStruct_.testUInt8_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<uint8_t&>
   testUInt8_ref() & {
    return underlyingThriftStruct_.testUInt8_ref();
  }
  uint8_t testUInt8() const {
    return underlyingThriftStruct_.testUInt8;
  }
  uint8_t& testUInt8() {
    markBufferAsDirty();
    return underlyingThriftStruct_.testUInt8;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const uint16_t&>
   testUInt16_ref() const& {
    return underlyingThriftStruct_.testUInt16_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<uint16_t&>
   testUInt16_ref() & {
    return underlyingThriftStruct_.testUInt16_ref();
  }
  uint16_t testUInt16() const {
    return underlyingThriftStruct_.testUInt16;
  }
  uint16_t& testUInt16() {
    markBufferAsDirty();
    return underlyingThriftStruct_.testUInt16;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const uint32_t&>
   testUInt32_ref() const& {
    return underlyingThriftStruct_.testUInt32_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<uint32_t&>
   testUInt32_ref() & {
    return underlyingThriftStruct_.testUInt32_ref();
  }
  uint32_t testUInt32() const {
    return underlyingThriftStruct_.testUInt32;
  }
  uint32_t& testUInt32() {
    markBufferAsDirty();
    return underlyingThriftStruct_.testUInt32;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const uint64_t&>
   testUInt64_ref() const& {
    return underlyingThriftStruct_.testUInt64_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<uint64_t&>
   testUInt64_ref() & {
    return underlyingThriftStruct_.testUInt64_ref();
  }
  uint64_t testUInt64() const {
    return underlyingThriftStruct_.testUInt64;
  }
  uint64_t& testUInt64() {
    markBufferAsDirty();
    return underlyingThriftStruct_.testUInt64;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const float&>
   testFloat_ref() const& {
    return underlyingThriftStruct_.testFloat_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<float&>
   testFloat_ref() & {
    return underlyingThriftStruct_.testFloat_ref();
  }
  float testFloat() const {
    return underlyingThriftStruct_.testFloat;
  }
  float& testFloat() {
    markBufferAsDirty();
    return underlyingThriftStruct_.testFloat;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const double&>
   testDouble_ref() const& {
    return underlyingThriftStruct_.testDouble_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<double&>
   testDouble_ref() & {
    return underlyingThriftStruct_.testDouble_ref();
  }
  double testDouble() const {
    return underlyingThriftStruct_.testDouble;
  }
  double& testDouble() {
    markBufferAsDirty();
    return underlyingThriftStruct_.testDouble;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const std::string&>
   testShortString_ref() const& {
    return underlyingThriftStruct_.testShortString_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::string&>
   testShortString_ref() & {
    return underlyingThriftStruct_.testShortString_ref();
  }
  const std::string& testShortString() const {
    return underlyingThriftStruct_.testShortString;
  }
  std::string& testShortString() {
    markBufferAsDirty();
    return underlyingThriftStruct_.testShortString;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const std::string&>
   testLongString_ref() const& {
    return underlyingThriftStruct_.testLongString_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::string&>
   testLongString_ref() & {
    return underlyingThriftStruct_.testLongString_ref();
  }
  const std::string& testLongString() const {
    return underlyingThriftStruct_.testLongString;
  }
  std::string& testLongString() {
    markBufferAsDirty();
    return underlyingThriftStruct_.testLongString;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const folly::IOBuf&>
   testIobuf_ref() const& {
    return underlyingThriftStruct_.testIobuf_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<folly::IOBuf&>
   testIobuf_ref() & {
    return underlyingThriftStruct_.testIobuf_ref();
  }
  const folly::IOBuf& testIobuf() const {
    return underlyingThriftStruct_.testIobuf;
  }
  folly::IOBuf& testIobuf() {
    markBufferAsDirty();
    return underlyingThriftStruct_.testIobuf;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const std::vector<std::string>&>
   testList_ref() const& {
    return underlyingThriftStruct_.testList_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::vector<std::string>&>
   testList_ref() & {
    return underlyingThriftStruct_.testList_ref();
  }
  const std::vector<std::string>& testList() const {
    return underlyingThriftStruct_.testList;
  }
  std::vector<std::string>& testList() {
    markBufferAsDirty();
    return underlyingThriftStruct_.testList;
  }
  const carbon::test::thrift::DummyThriftRequest& getThriftStruct() const {
    return underlyingThriftStruct_;
  }
  carbon::test::thrift::DummyThriftRequest& getThriftStruct() {
    markBufferAsDirty();
    return underlyingThriftStruct_;
  }

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  // Methods for Thrift interoperability, note that the methods work with Thrift
  // protocols and not Carbon protocol.
  void __clear() {
    underlyingThriftStruct_.__clear();
  }
  template <class Protocol>
  uint32_t write(Protocol* protocol) const {
    return underlyingThriftStruct_.write(protocol);
  }
  template <class Protocol>
  uint32_t serializedSize(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSize(protocol);
  }
  template <class Protocol>
  uint32_t serializedSizeZC(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSizeZC(protocol);
  }
 private:
  template <class Protocol>
  void readNoXfer(Protocol* protocol) {
    underlyingThriftStruct_.read(protocol);
  }

  friend class apache::thrift::Cpp2Ops<DummyThriftRequest>;

 private:
  struct __isset {
    bool key;
    bool testBool;
    bool testInt8;
    bool testInt16;
    bool testInt32;
    bool testInt64;
    bool testUInt8;
    bool testUInt16;
    bool testUInt32;
    bool testUInt64;
    bool testFloat;
    bool testDouble;
    bool testShortString;
    bool testLongString;
    bool testIobuf;
    bool testList;
  } __isset = {};

  carbon::test::thrift::DummyThriftRequest underlyingThriftStruct_;
};

class DummyThriftReply : public carbon::ReplyCommon {
 public:

  static constexpr size_t typeId = 66;

  DummyThriftReply() = default;
  DummyThriftReply(const DummyThriftReply&) = default;
  DummyThriftReply& operator=(const DummyThriftReply&) = default;
  DummyThriftReply(DummyThriftReply&&) = default;
  DummyThriftReply& operator=(DummyThriftReply&&) = default;
  explicit DummyThriftReply(carbon::Result carbonResult) {
    underlyingThriftStruct_.result = carbonResult;
  }

  FOLLY_ERASE ::apache::thrift::field_ref<const carbon::Result&>
   result_ref() const& {
    return underlyingThriftStruct_.result_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<carbon::Result&>
   result_ref() & {
    return underlyingThriftStruct_.result_ref();
  }
  carbon::Result result() const {
    return underlyingThriftStruct_.result;
  }
  carbon::Result& result() {
    return underlyingThriftStruct_.result;
  }
  FOLLY_ERASE ::apache::thrift::field_ref<const std::string&>
   message_ref() const& {
    return underlyingThriftStruct_.message_ref();
  }
  FOLLY_ERASE ::apache::thrift::field_ref<std::string&>
   message_ref() & {
    return underlyingThriftStruct_.message_ref();
  }
  const std::string& message() const {
    return underlyingThriftStruct_.message;
  }
  std::string& message() {
    return underlyingThriftStruct_.message;
  }
  const carbon::test::thrift::DummyThriftReply& getThriftStruct() const {
    return underlyingThriftStruct_;
  }
  carbon::test::thrift::DummyThriftReply& getThriftStruct() {
    return underlyingThriftStruct_;
  }

  template <class Writer>
  void serialize(Writer&& writer) const;

  void deserialize(carbon::CarbonProtocolReader& reader);

  template <class V>
  void visitFields(V&& v);
  template <class V>
  void visitFields(V&& v) const;

  // Methods for Thrift interoperability, note that the methods work with Thrift
  // protocols and not Carbon protocol.
  void __clear() {
    underlyingThriftStruct_.__clear();
  }
  template <class Protocol>
  uint32_t write(Protocol* protocol) const {
    return underlyingThriftStruct_.write(protocol);
  }
  template <class Protocol>
  uint32_t serializedSize(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSize(protocol);
  }
  template <class Protocol>
  uint32_t serializedSizeZC(Protocol* protocol) const {
    return underlyingThriftStruct_.serializedSizeZC(protocol);
  }
 private:
  template <class Protocol>
  void readNoXfer(Protocol* protocol) {
    underlyingThriftStruct_.read(protocol);
  }

  friend class apache::thrift::Cpp2Ops<DummyThriftReply>;

 private:
  struct __isset {
    bool result;
    bool message;
  } __isset = {};

  carbon::test::thrift::DummyThriftReply underlyingThriftStruct_;
};
} // namespace test
} // namespace carbon

#include "CarbonThriftTestMessages-inl.h"
