/*
 *  Copyright (c) 2017-present, Facebook, Inc.
 *
 *  This source code is licensed under the MIT license found in the LICENSE
 *  file in the root directory of this source tree.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 *  @generated
 */
#include "CarbonThriftTestMessages.h"

namespace carbon {
namespace test {

constexpr const char* const DummyThriftRequest::name;

void DummyThriftRequest::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        reader.readField(key(), fieldType);
        break;
      }
      case 2: {
        reader.readField(testBool(), fieldType);
        break;
      }
      case 3: {
        reader.readField(testInt8(), fieldType);
        break;
      }
      case 4: {
        reader.readField(testInt16(), fieldType);
        break;
      }
      case 5: {
        reader.readField(testInt32(), fieldType);
        break;
      }
      case 6: {
        reader.readField(testInt64(), fieldType);
        break;
      }
      case 7: {
        reader.readField(testUInt8(), fieldType);
        break;
      }
      case 8: {
        reader.readField(testUInt16(), fieldType);
        break;
      }
      case 9: {
        reader.readField(testUInt32(), fieldType);
        break;
      }
      case 10: {
        reader.readField(testUInt64(), fieldType);
        break;
      }
      case 11: {
        reader.readField(testFloat(), fieldType);
        break;
      }
      case 12: {
        reader.readField(testDouble(), fieldType);
        break;
      }
      case 13: {
        reader.readField(testShortString(), fieldType);
        break;
      }
      case 14: {
        reader.readField(testLongString(), fieldType);
        break;
      }
      case 15: {
        reader.readField(testIobuf(), fieldType);
        break;
      }
      case 16: {
        reader.readField(testList(), fieldType);
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

void DummyThriftReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        reader.readField(result(), fieldType);
        break;
      }
      case 2: {
        reader.readField(message(), fieldType);
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}
} // namespace test
} // namespace carbon
