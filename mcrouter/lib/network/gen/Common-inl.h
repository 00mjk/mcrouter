/*
 *  Copyright (c) 2016, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 */

namespace facebook {
namespace memcache {

inline void McVersionRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McVersionRequest::deserialize(
    carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McVersionReply::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeBinaryField(2 /* field id */, value());
  writer.writeBinaryField(3 /* field id */, message());
  writer.writeInt16Field(4 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McVersionReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        value() = reader.readBinaryField<folly::IOBuf>();
        break;
      }
      case 3: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 4: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McStatsRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McStatsRequest::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McStatsReply::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeBinaryField(2 /* field id */, message());
  writer.writeVectorField<std::string>(3 /* field id */, stats());
  writer.writeInt16Field(4 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McStatsReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 3: {
        stats() = reader.readVectorField<std::string>();
        break;
      }
      case 4: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McShutdownRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McShutdownRequest::deserialize(
    carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McShutdownReply::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeBinaryField(2 /* field id */, message());
  writer.writeInt16Field(3 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McShutdownReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 3: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McQuitRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McQuitRequest::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McQuitReply::serialize(carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeBinaryField(2 /* field id */, message());
  writer.writeInt16Field(3 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McQuitReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 3: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McExecRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McExecRequest::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McExecReply::serialize(carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeBinaryField(2 /* field id */, response());
  writer.writeBinaryField(3 /* field id */, message());
  writer.writeInt16Field(4 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McExecReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        response() = reader.readBinaryField<std::string>();
        break;
      }
      case 3: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 4: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

} // memcache
} // facebook
