/*
 *  Copyright (c) 2016, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/*
 *  THIS FILE IS AUTOGENERATED. DO NOT MODIFY IT; ALL CHANGES WILL BE LOST IN
 *  VAIN.
 *
 */

namespace facebook {
namespace memcache {

inline void McGetRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeInt64Field(2 /* field id */, flags());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McGetRequest::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      case 2: {
        flags() = reader.readInt64Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McGetReply::serialize(carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeBinaryField(2 /* field id */, value());
  writer.writeUInt64Field(3 /* field id */, flags());
  writer.writeBinaryField(4 /* field id */, message());
  writer.writeInt16Field(5 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McGetReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        value() = reader.readBinaryField<folly::IOBuf>();
        break;
      }
      case 3: {
        flags() = reader.readUInt64Field();
        break;
      }
      case 4: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 5: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McSetRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeInt32Field(2 /* field id */, exptime());
  writer.writeUInt64Field(3 /* field id */, flags());
  writer.writeBinaryField(4 /* field id */, value());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McSetRequest::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      case 2: {
        exptime() = reader.readInt32Field();
        break;
      }
      case 3: {
        flags() = reader.readUInt64Field();
        break;
      }
      case 4: {
        value() = reader.readBinaryField<folly::IOBuf>();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McSetReply::serialize(carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeUInt64Field(2 /* field id */, flags());
  writer.writeBinaryField(3 /* field id */, value());
  writer.writeBinaryField(4 /* field id */, message());
  writer.writeInt16Field(5 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McSetReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        flags() = reader.readUInt64Field();
        break;
      }
      case 3: {
        value() = reader.readBinaryField<folly::IOBuf>();
        break;
      }
      case 4: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 5: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McDeleteRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeUInt64Field(2 /* field id */, flags());
  writer.writeInt32Field(3 /* field id */, exptime());
  writer.writeBinaryField(4 /* field id */, value());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McDeleteRequest::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      case 2: {
        flags() = reader.readUInt64Field();
        break;
      }
      case 3: {
        exptime() = reader.readInt32Field();
        break;
      }
      case 4: {
        value() = reader.readBinaryField<folly::IOBuf>();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McDeleteReply::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeUInt64Field(2 /* field id */, flags());
  writer.writeBinaryField(3 /* field id */, value());
  writer.writeBinaryField(4 /* field id */, message());
  writer.writeInt16Field(5 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McDeleteReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        flags() = reader.readUInt64Field();
        break;
      }
      case 3: {
        value() = reader.readBinaryField<folly::IOBuf>();
        break;
      }
      case 4: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 5: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McLeaseGetRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McLeaseGetRequest::deserialize(
    carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McLeaseGetReply::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeInt64Field(2 /* field id */, leaseToken());
  writer.writeBinaryField(3 /* field id */, value());
  writer.writeInt64Field(4 /* field id */, flags());
  writer.writeBinaryField(5 /* field id */, message());
  writer.writeInt16Field(6 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McLeaseGetReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        leaseToken() = reader.readInt64Field();
        break;
      }
      case 3: {
        value() = reader.readBinaryField<folly::IOBuf>();
        break;
      }
      case 4: {
        flags() = reader.readInt64Field();
        break;
      }
      case 5: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 6: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McLeaseSetRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeInt32Field(2 /* field id */, exptime());
  writer.writeUInt64Field(3 /* field id */, flags());
  writer.writeBinaryField(4 /* field id */, value());
  writer.writeInt64Field(5 /* field id */, leaseToken());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McLeaseSetRequest::deserialize(
    carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      case 2: {
        exptime() = reader.readInt32Field();
        break;
      }
      case 3: {
        flags() = reader.readUInt64Field();
        break;
      }
      case 4: {
        value() = reader.readBinaryField<folly::IOBuf>();
        break;
      }
      case 5: {
        leaseToken() = reader.readInt64Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McLeaseSetReply::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeBinaryField(2 /* field id */, message());
  writer.writeInt16Field(3 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McLeaseSetReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 3: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McAddRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeInt32Field(2 /* field id */, exptime());
  writer.writeUInt64Field(3 /* field id */, flags());
  writer.writeBinaryField(4 /* field id */, value());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McAddRequest::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      case 2: {
        exptime() = reader.readInt32Field();
        break;
      }
      case 3: {
        flags() = reader.readUInt64Field();
        break;
      }
      case 4: {
        value() = reader.readBinaryField<folly::IOBuf>();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McAddReply::serialize(carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeBinaryField(2 /* field id */, message());
  writer.writeInt16Field(3 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McAddReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 3: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McReplaceRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeInt32Field(2 /* field id */, exptime());
  writer.writeUInt64Field(3 /* field id */, flags());
  writer.writeBinaryField(4 /* field id */, value());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McReplaceRequest::deserialize(
    carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      case 2: {
        exptime() = reader.readInt32Field();
        break;
      }
      case 3: {
        flags() = reader.readUInt64Field();
        break;
      }
      case 4: {
        value() = reader.readBinaryField<folly::IOBuf>();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McReplaceReply::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeBinaryField(2 /* field id */, message());
  writer.writeInt16Field(3 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McReplaceReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 3: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McGetsRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McGetsRequest::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McGetsReply::serialize(carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeUInt64Field(2 /* field id */, casToken());
  writer.writeBinaryField(3 /* field id */, value());
  writer.writeUInt64Field(4 /* field id */, flags());
  writer.writeBinaryField(5 /* field id */, message());
  writer.writeInt16Field(6 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McGetsReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        casToken() = reader.readUInt64Field();
        break;
      }
      case 3: {
        value() = reader.readBinaryField<folly::IOBuf>();
        break;
      }
      case 4: {
        flags() = reader.readUInt64Field();
        break;
      }
      case 5: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 6: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McCasRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeInt32Field(2 /* field id */, exptime());
  writer.writeUInt64Field(3 /* field id */, flags());
  writer.writeBinaryField(4 /* field id */, value());
  writer.writeUInt64Field(5 /* field id */, casToken());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McCasRequest::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      case 2: {
        exptime() = reader.readInt32Field();
        break;
      }
      case 3: {
        flags() = reader.readUInt64Field();
        break;
      }
      case 4: {
        value() = reader.readBinaryField<folly::IOBuf>();
        break;
      }
      case 5: {
        casToken() = reader.readUInt64Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McCasReply::serialize(carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeBinaryField(2 /* field id */, message());
  writer.writeInt16Field(3 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McCasReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 3: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McIncrRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeInt64Field(2 /* field id */, delta());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McIncrRequest::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      case 2: {
        delta() = reader.readInt64Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McIncrReply::serialize(carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeInt64Field(2 /* field id */, delta());
  writer.writeBinaryField(3 /* field id */, message());
  writer.writeInt16Field(4 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McIncrReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        delta() = reader.readInt64Field();
        break;
      }
      case 3: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 4: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McDecrRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeInt64Field(2 /* field id */, delta());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McDecrRequest::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      case 2: {
        delta() = reader.readInt64Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McDecrReply::serialize(carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeInt64Field(2 /* field id */, delta());
  writer.writeBinaryField(3 /* field id */, message());
  writer.writeInt16Field(4 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McDecrReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        delta() = reader.readInt64Field();
        break;
      }
      case 3: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 4: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McMetagetRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McMetagetRequest::deserialize(
    carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McMetagetReply::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeInt32Field(2 /* field id */, age());
  writer.writeInt32Field(3 /* field id */, exptime());
  writer.writeInt16Field(4 /* field id */, ipv());
  writer.writeBinaryField(5 /* field id */, ipAddress());
  writer.writeBinaryField(6 /* field id */, message());
  writer.writeInt16Field(7 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McMetagetReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        age() = reader.readInt32Field();
        break;
      }
      case 3: {
        exptime() = reader.readInt32Field();
        break;
      }
      case 4: {
        ipv() = reader.readInt16Field();
        break;
      }
      case 5: {
        ipAddress() = reader.readBinaryField<std::string>();
        break;
      }
      case 6: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 7: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McVersionRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McVersionRequest::deserialize(
    carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McVersionReply::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeBinaryField(2 /* field id */, value());
  writer.writeBinaryField(3 /* field id */, message());
  writer.writeInt16Field(4 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McVersionReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        value() = reader.readBinaryField<folly::IOBuf>();
        break;
      }
      case 3: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 4: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McAppendRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeInt32Field(2 /* field id */, exptime());
  writer.writeUInt64Field(3 /* field id */, flags());
  writer.writeBinaryField(4 /* field id */, value());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McAppendRequest::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      case 2: {
        exptime() = reader.readInt32Field();
        break;
      }
      case 3: {
        flags() = reader.readUInt64Field();
        break;
      }
      case 4: {
        value() = reader.readBinaryField<folly::IOBuf>();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McAppendReply::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeBinaryField(2 /* field id */, message());
  writer.writeInt16Field(3 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McAppendReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 3: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McPrependRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeInt32Field(2 /* field id */, exptime());
  writer.writeUInt64Field(3 /* field id */, flags());
  writer.writeBinaryField(4 /* field id */, value());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McPrependRequest::deserialize(
    carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      case 2: {
        exptime() = reader.readInt32Field();
        break;
      }
      case 3: {
        flags() = reader.readUInt64Field();
        break;
      }
      case 4: {
        value() = reader.readBinaryField<folly::IOBuf>();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McPrependReply::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeBinaryField(2 /* field id */, message());
  writer.writeInt16Field(3 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McPrependReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 3: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McTouchRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeInt32Field(2 /* field id */, exptime());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McTouchRequest::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      case 2: {
        exptime() = reader.readInt32Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McTouchReply::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeBinaryField(2 /* field id */, message());
  writer.writeInt16Field(3 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McTouchReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 3: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McStatsRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McStatsRequest::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McStatsReply::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeBinaryField(2 /* field id */, message());
  writer.writeListField<std::string>(3 /* field id */, stats());
  writer.writeInt16Field(4 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McStatsReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 3: {
        stats() = reader.readListField<std::string>();
        break;
      }
      case 4: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McShutdownRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McShutdownRequest::deserialize(
    carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McShutdownReply::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeBinaryField(2 /* field id */, message());
  writer.writeInt16Field(3 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McShutdownReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 3: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McQuitRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McQuitRequest::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McQuitReply::serialize(carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeBinaryField(2 /* field id */, message());
  writer.writeInt16Field(3 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McQuitReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 3: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McExecRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McExecRequest::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McExecReply::serialize(carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeBinaryField(2 /* field id */, response());
  writer.writeBinaryField(3 /* field id */, message());
  writer.writeInt16Field(4 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McExecReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        response() = reader.readBinaryField<std::string>();
        break;
      }
      case 3: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 4: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McFlushReRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McFlushReRequest::deserialize(
    carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McFlushReReply::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeBinaryField(2 /* field id */, message());
  writer.writeInt16Field(3 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McFlushReReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 3: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McFlushAllRequest::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeUserTypeField(1 /* field id */, key());
  writer.writeInt32Field(2 /* field id */, delay());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McFlushAllRequest::deserialize(
    carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        key() = reader.readUserTypeField<carbon::Keys<folly::IOBuf>>();
        break;
      }
      case 2: {
        delay() = reader.readInt32Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

inline void McFlushAllReply::serialize(
    carbon::CarbonProtocolWriter& writer) const {
  writer.writeStructBegin();
  writer.writeResultField(1 /* field id */, result());
  writer.writeBinaryField(2 /* field id */, message());
  writer.writeInt16Field(3 /* field id */, appSpecificErrorCode());
  writer.writeStructEnd();
  writer.writeStop();
}

inline void McFlushAllReply::deserialize(carbon::CarbonProtocolReader& reader) {
  reader.readStructBegin();
  while (true) {
    const auto pr = reader.readFieldHeader();
    const auto fieldType = pr.first;
    const auto fieldId = pr.second;

    if (fieldType == carbon::FieldType::Stop) {
      break;
    }

    switch (fieldId) {
      case 1: {
        result() = reader.readResultField();
        break;
      }
      case 2: {
        message() = reader.readBinaryField<std::string>();
        break;
      }
      case 3: {
        appSpecificErrorCode() = reader.readInt16Field();
        break;
      }
      default: {
        reader.skip(fieldType);
        break;
      }
    }
  }
  reader.readStructEnd();
}

} // memcache
} // facebook
